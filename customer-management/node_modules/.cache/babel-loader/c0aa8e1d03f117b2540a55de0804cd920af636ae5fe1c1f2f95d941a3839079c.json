{"ast":null,"code":"var _jsxFileName = \"D:\\\\Zithara\\\\customer-management\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios'; // Importing Axios for making HTTP requests\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react'; // Importing necessary React components\nimport './App.css';\nimport Pagination from './components/Pagination'; // Importing Pagination component\nimport SearchBar from './components/SearchBar'; // Importing SearchBar component\nimport CustomerTable from './components/customertable'; // Importing CustomerTable component\n\n// Function component for the main application\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables for managing customers data, search term, pagination, and sorting\n  const [customers, setCustomers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const customersPerPage = 20;\n  const [totalPages, setTotalPages] = useState(0);\n  const [sortColumn, setSortColumn] = useState('date');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [sortDirectionTwo, setSortDirectionTwo] = useState('asc');\n  // Effect hook to fetch data from the server on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/customers');\n        setCustomers(response.data);\n        setTotalPages(Math.ceil(response.data.length / customersPerPage));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const indexOfLastRecord = currentPage * customersPerPage;\n  const indexOfFirstRecord = indexOfLastRecord - customersPerPage;\n  const currentRecords = customers.slice(indexOfFirstRecord, indexOfLastRecord);\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  // Function to handle sorting by a single column\n  const handleSort = column => {\n    // If the same column is clicked, toggle the sorting direction\n    if (column === sortColumn) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // If a different column is clicked, set the new sort column and default sorting direction to ascending\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n  // Function to handle sorting by the second column\n  const handleSortTwo = column => {\n    // If the same column is clicked, toggle the sorting direction\n    if (column === sortColumn) {\n      setSortDirectionTwo(sortDirectionTwo === 'asc' ? 'desc' : 'asc');\n    } else {\n      // If a different column is clicked, set the new sort column and default sorting direction to ascending\n      setSortColumn(column);\n      setSortDirectionTwo('asc');\n    }\n  };\n  // JSX to render the main application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Customer Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      setSearchTerm: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomerTable, {\n      customers: currentRecords,\n      searchTerm: searchTerm,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection,\n      handleSort: handleSort,\n      handleSortTwo: handleSortTwo\n      // Pass handleSort function as a prop\n      ,\n      sortDirectionTwo: sortDirectionTwo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      customersPerPage: customersPerPage,\n      totalPages: totalPages,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n// Exporting the App component\n_s(App, \"TuOg/jTfpE+5ZH4ek0C0i6bBAx0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","React","useEffect","useState","Pagination","SearchBar","CustomerTable","jsxDEV","_jsxDEV","App","_s","customers","setCustomers","searchTerm","setSearchTerm","currentPage","setCurrentPage","customersPerPage","totalPages","setTotalPages","sortColumn","setSortColumn","sortDirection","setSortDirection","sortDirectionTwo","setSortDirectionTwo","fetchData","response","get","data","Math","ceil","length","error","console","indexOfLastRecord","indexOfFirstRecord","currentRecords","slice","paginate","pageNumber","handleSort","column","handleSortTwo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Zithara/customer-management/src/App.js"],"sourcesContent":["import axios from 'axios'; // Importing Axios for making HTTP requests\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react'; // Importing necessary React components\nimport './App.css';\nimport Pagination from './components/Pagination'; // Importing Pagination component\nimport SearchBar from './components/SearchBar'; // Importing SearchBar component\nimport CustomerTable from './components/customertable'; // Importing CustomerTable component\n\n\n// Function component for the main application\nfunction App() {\n  // State variables for managing customers data, search term, pagination, and sorting\n  const [customers, setCustomers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const customersPerPage=20;\n  const[totalPages,setTotalPages]=useState(0);\n\n  const [sortColumn, setSortColumn] = useState('date');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [sortDirectionTwo, setSortDirectionTwo] = useState('asc');\n // Effect hook to fetch data from the server on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/customers');\n        setCustomers(response.data);\n        setTotalPages(Math.ceil(response.data.length/customersPerPage));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const indexOfLastRecord = currentPage * customersPerPage;\n  const indexOfFirstRecord = indexOfLastRecord - customersPerPage;\n  const currentRecords = customers.slice(indexOfFirstRecord, indexOfLastRecord);\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n\n // Function to handle sorting by a single column\n  const handleSort = (column) => {\n    // If the same column is clicked, toggle the sorting direction\n    if (column === sortColumn) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // If a different column is clicked, set the new sort column and default sorting direction to ascending\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n// Function to handle sorting by the second column\n  const handleSortTwo = (column) => {\n    // If the same column is clicked, toggle the sorting direction\n    if (column === sortColumn) {\n      setSortDirectionTwo(sortDirectionTwo === 'asc' ? 'desc' : 'asc');\n    } else {\n      // If a different column is clicked, set the new sort column and default sorting direction to ascending\n      setSortColumn(column);\n      setSortDirectionTwo('asc');\n    }\n  };\n// JSX to render the main application\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center mb-4\">Customer Management</h1>\n      <SearchBar setSearchTerm={setSearchTerm} />\n      <CustomerTable\n        customers={currentRecords}\n        searchTerm={searchTerm}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        handleSort={handleSort} \n        handleSortTwo={handleSortTwo}\n        // Pass handleSort function as a prop\n        sortDirectionTwo={sortDirectionTwo}\n      />\n      {/* Rendering the Pagination component and passing necessary props */}\n      <Pagination\n        customersPerPage={customersPerPage}\n        totalPages={totalPages}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n// Exporting the App component\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}